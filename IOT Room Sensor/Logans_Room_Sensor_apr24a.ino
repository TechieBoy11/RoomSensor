#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Logans Room Sensor"
  https://create.arduino.cc/cloud/things/89bfdb48-a633-4df2-8644-322f0149e790 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudContactSensor roomSensor;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// Turns on LED when motion is detected
//
//  PIR (Vcc 5V, out, GND)

#include "thingProperties.h"

#include <WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>

int led = 13;                // the pin that the LED is atteched to
int sensor = 2;              // the pin that the sensor is atteched to
int state = LOW;             // by default, no motion detected
int val = 0;                 // variable to store the sensor status (value)
WiFiUDP ntpUDP;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  // Added code
  pinMode(led, OUTPUT);      // initalize LED as an output
  pinMode(sensor, INPUT);    // initialize sensor as an input
  /*
  // Wait for WiFi to connect
  Serial.println("Waiting for WiFi connection...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  */
  Serial.println("\nWiFi connected");
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  static unsigned long lastDetectionTime = 0;  // Move this outside the if/else blocks
  // Your code here 
  val = digitalRead(sensor);   // read sensor value
  if (val == HIGH) {           // check if the sensor is HIGH
    roomSensor = true; // Set IoT Cloud variable to true
    Serial.println(roomSensor);
    digitalWrite(led, HIGH);   // turn LED ON
    
    // Using millis for non-blocking timing instead of delay
    lastDetectionTime = millis(); // Update last detection time
    // The rest of the logic will be handled in the else part
     
     if (state == LOW) {
       Serial.println("Motion detected!"); 
     }
   } 
   else {
    // Only turn off the sensor if motion stopped for at least 60 seconds
    if (millis() - lastDetectionTime >= 60000) {
       roomSensor = false; // turn off lights 
       digitalWrite(led, LOW); // turn LED OFF
      
      if (state == HIGH){
        Serial.println("Motion stopped!");
        state = LOW;       // update variable state to LOW
      }
    }
   }
}





